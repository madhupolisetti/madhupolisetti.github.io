openapi: 3.0.3
info:
  title: net2phone API
  description: net2phone's public API.
  version: internal
  x-internalVersion: spec-0.4.0
  license:
    name: MIT
    url: 'https://spdx.org/licenses/MIT'
  termsOfService: 'https://app.net2phone.com/settings/termsandpolicies'
servers:
  - url: 'https://api-dev.qa.n2p.io/v2'
    description: net2phone Development API Server
  - url: 'https://api-qa.qa.n2p.io/v2'
    description: net2phone QA API Server
  - url: 'https://api-uat.prod.n2p.io/v2'
    description: net2phone UAT API Server
  - url: 'https://api-prod.prod.n2p.io/v2'
    description: net2phone Production API Server
security:
  - n2pOpenIdConnect: []
tags:
  - name: Avatar
    description: Change profile picture.
  - name: WebhookSubscription
    description: 'Subscribe to call, voicemail, message events.'
paths:
  '/users:batch-get':
    get:
      x-internal: true
      operationId: BatchGetUsers
      description: >-
        List users batch matching the input user ids. This will return a
        successful response even if the result collection is empty, or if some
        user with ids provided are not found.
      tags:
        - User
      parameters:
        - in: query
          name: ids
          required: true
          schema:
            type: array
            minItems: 1
            maxItems: 100
            items:
              $ref: '#/components/schemas/user-id'
          description: The list of numeric ids of users.
      responses:
        '200':
          description: >-
            Collection of users matching the input ids, exclusing those that
            were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection-of-user'
        '401':
          $ref: '#/components/responses/authentication-error'
        '422':
          $ref: '#/components/responses/validation-error'
      summary: Batch get users
  /users/me/avatar:
    put:
      operationId: UpdateMyAvatar
      tags:
        - Avatar
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/update-avatar-command'
      responses:
        '200':
          description: The user's avatar was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/avatar'
        '401':
          $ref: '#/components/responses/authentication-error'
        '422':
          $ref: '#/components/responses/validation-error'
      summary: Update my avatar
  '/users/{userId}/avatar-{avatarImageSize}.jpg':
    get:
      operationId: GetAvatarImage
      tags:
        - Avatar
      parameters:
        - $ref: '#/components/parameters/user-id'
        - name: avatarImageSize
          in: path
          required: true
          schema:
            type: string
            example: '400'
      responses:
        '307':
          description: A redirect to the user's avatar image of a certain size.
          headers:
            Location:
              schema:
                type: string
                description: Location of the user avatar.
                example: >-
                  https://n2p-messaging-prod-storage.s3.us-east-1.amazonaws.com/6082ce5e436acf00018faf27-1619430611421-200px.jpg
        '401':
          $ref: '#/components/responses/authentication-error'
        '404':
          $ref: '#/components/responses/not-found-error'
      summary: Get avatar image
  /webhook-event-types:
    get:
      operationId: ListWebhookEventTypes
      summary: List webhook event types
      tags:
        - WebhookSubscription
      responses:
        '200':
          description: Collection of webhook event types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection-of-webhook-event-type'
        '401':
          $ref: '#/components/responses/authentication-error'
  /webhook-subscriptions:
    get:
      operationId: ListWebhookSubscription
      description: >
        Lists all webhook subscriptions accessible to the current user. `Admin`
        users will get both `Account` and `User` subscriptions. `Regular` users
        get their own webhook subscriptions only.
      tags:
        - WebhookSubscription
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/before'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: Page of webhook subscriptions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cursor-page-of-webhook-subscription'
        '401':
          $ref: '#/components/responses/authentication-error'
        '422':
          $ref: '#/components/responses/validation-error'
      summary: List webhook subscription
    post:
      operationId: CreateWebhookSubscription
      tags:
        - WebhookSubscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-webhook-subscription-command'
      responses:
        '201':
          description: Webhook subscription was succesfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook-subscription'
        '401':
          $ref: '#/components/responses/authentication-error'
        '403':
          $ref: '#/components/responses/forbidden-error'
        '404':
          $ref: '#/components/responses/not-found-error'
        '422':
          $ref: '#/components/responses/validation-error'
      summary: Create webhook subscription
  '/webhook-subscriptions/{webhookSubscriptionId}':
    get:
      operationId: GetWebhookSubscription
      tags:
        - WebhookSubscription
      parameters:
        - $ref: '#/components/parameters/webhook-subscription-id'
      responses:
        '200':
          description: Webhook subscription object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook-subscription'
        '401':
          $ref: '#/components/responses/authentication-error'
        '404':
          $ref: '#/components/responses/not-found-error'
      summary: Get webhook subscription
    put:
      operationId: UpdateWebhookSubscription
      tags:
        - WebhookSubscription
      parameters:
        - $ref: '#/components/parameters/webhook-subscription-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-webhook-subscription-command'
      responses:
        '200':
          description: Updated webhook subscription object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook-subscription'
        '401':
          $ref: '#/components/responses/authentication-error'
        '403':
          $ref: '#/components/responses/forbidden-error'
        '404':
          $ref: '#/components/responses/not-found-error'
        '422':
          $ref: '#/components/responses/validation-error'
      summary: Update webhook subscription
    delete:
      operationId: DeleteWebhookSubscription
      parameters:
        - $ref: '#/components/parameters/webhook-subscription-id'
      tags:
        - WebhookSubscription
      responses:
        '204':
          description: The webhook subscription was deleted successfully.
        '401':
          $ref: '#/components/responses/authentication-error'
        '404':
          $ref: '#/components/responses/not-found-error'
      summary: Delete webhook subscription
  '/webhook-subscriptions/{webhookSubscriptionId}/secret':
    put:
      operationId: RegenerateWebhookSubscriptionSecret
      tags:
        - WebhookSubscription
      parameters:
        - $ref: '#/components/parameters/webhook-subscription-id'
      responses:
        '200':
          description: Webhook subscription secret was regenerated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook-subscription-secret'
        '401':
          $ref: '#/components/responses/authentication-error'
        '404':
          $ref: '#/components/responses/not-found-error'
      summary: Regenerate webhook subscription secret
components:
  securitySchemes:
    n2pOpenIdConnect:
      type: openIdConnect
      openIdConnectUrl: 'https://auth.net2phone.com/.well-known/openid-configuration'
  schemas:
    user-id:
      type: string
      example: 6gtkcdsr
      description: The unique identifier of the user.
      x-comment: >
        To encode `int32` values, use the following. 1. Convert integer to
        bytes, little-endian (see why this is important here:
        https://stackoverflow.com/questions/217980/c-sharp-little-endian-or-big-endian/217993#217993).
        2. Base32 encode the bytes and add a checksum character
        (https://www.crockford.com/base32.html).
      title: UserId
    avatar-image-kind:
      type: string
      description: Describes if the avatar image is original uploaded or resized.
      enum:
        - Original
        - Resized
      title: AvatarImageKind
    avatar-image:
      type: object
      required:
        - url
        - kind
      properties:
        url:
          type: string
          example: >-
            https://n2p-messaging-prod-storage.s3.us-east-1.amazonaws.com/6082ce5e436acf00018faf27-1619430611421-200px.jpg
        sizePixels:
          type: integer
          format: int32
          nullable: true
          description: >-
            The size of the image in pixels (for a resized image). Both width
            and height will be same for a resized image. It only holds value if
            the avatar image is resized.
          example: 400
        kind:
          $ref: '#/components/schemas/avatar-image-kind'
      title: AvatarImage
    avatar:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/user-id'
        avatarImages:
          type: array
          items:
            $ref: '#/components/schemas/avatar-image'
      description: >-
        Avatar is available only for `unite` accounts. It's always null for
        `4PSA` and `netsapiens` accounts.
      title: Avatar
    role-id:
      type: string
      example: "Admin"
      description: >
        The unique identifier of the role. Possible values depend on "node
        kind":

        - **Unite** - `Regular`, `Admin`

        - **4PSA** - `member`, `administrator`, `owner`

        - **netsapiens** - `Basic User`, `Office Manager`, `Call Center Agent`,
        `Call Center Supervisor`, `No Portal`
      title: RoleId
    role:
      type: object
      required:
        - id
        - displayName
      properties:
        id:
          $ref: '#/components/schemas/role-id'
        displayName:
          type: string
      example:
        id: Regular
        displayName: Regular User
      title: Role
    user:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/user-id'
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        avatar:
          $ref: '#/components/schemas/avatar'
        role:
          allOf:
            - $ref: '#/components/schemas/role'
            - nullable: true
              x-comment: Roles are not available for RingSouth users.
      title: User
    collection-of-user:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/user'
      title: CollectionOfUser
    error:
      type: object
      description: The base type for all errors.
      required:
        - type
        - message
        - statusCode
        - traceId
      discriminator:
        propertyName: type
        mapping:
          ValidationError: '#/components/schemas/validation-error'
          ForbiddenError: '#/components/schemas/forbidden-error'
          NotFoundError: '#/components/schemas/not-found-error'
          AuthenticationError: '#/components/schemas/authentication-error'
      properties:
        type:
          type: string
          description: >
            A discriminator field that uniquely identifies the problem type.
            Please note, that 2 responses with the same HTTP status code can
            contain errors of different type.
          nullable: false
        message:
          type: string
          description: A human-readable explanation of the problem in US English.
          nullable: false
        statusCode:
          type: integer
          description: >
            The same status code as in the HTTP response. Don't use this to
            determine the error type, use the "type" field instead.
          nullable: false
          format: int32
          minimum: 400
          maximum: 599
        traceId:
          type: string
          description: >-
            Tracing identifier of the request. Including this in support
            requests will help to narrow down the issue.
          nullable: false
          example: 00-a52d4f52df80574c92bcdedb9abba5b0-7f70c12f16a7c44d-00
      title: Error
    validation-error-code:
      type: string
      description: Machine-readable validation error code.
      nullable: true
      enum:
        - Required
        - Range
        - Length
        - RegularExpression
        - Email
        - PhoneNumber
      title: ValidationErrorCode
    validation-error-detail:
      type: object
      required:
        - message
      properties:
        field:
          type: string
          description: >
            The optional name/path of the invalid field. The field can come as a
            path, query, header or body parameter.
          nullable: true
        message:
          type: string
          description: Human readable explanation of the error in US English.
          nullable: false
        code:
          $ref: '#/components/schemas/validation-error-code'
      title: ValidationErrorDetail
    validation-error:
      allOf:
        - $ref: '#/components/schemas/error'
        - type: object
          required:
            - details
          properties:
            details:
              type: array
              description: List of validation details.
              nullable: false
              items:
                $ref: '#/components/schemas/validation-error-detail'
      example:
        type: ValidationError
        message: The provided request contains invalid data.
        status: 422
        traceId: 00-a52d4f52df80574c92bcdedb9abba5b0-7f70c12f16a7c44d-00
        details:
          - message: Something was wrong with the object provided.
          - message: '''First Name'' must not be empty.'
            code: Required
            field: firstName
      title: ValidationError
    forbidden-error:
      allOf:
        - $ref: '#/components/schemas/error'
      example:
        type: ForbiddenError
        message: The operation is blocked due to insufficient access rights.
        status: 403
        traceId: 00-a52d4f52df80574c92bcdedb9abba5b0-7f70c12f16a7c44d-00
      title: ForbiddenError
    not-found-error:
      allOf:
        - $ref: '#/components/schemas/error'
      example:
        type: NotFoundError
        message: The user with id '25' was not found.
        status: 404
        traceId: 00-a52d4f52df80574c92bcdedb9abba5b0-7f70c12f16a7c44d-00
      title: NotFoundError
    authentication-error:
      allOf:
        - $ref: '#/components/schemas/error'
      example:
        type: AuthenticationError
        message: The operation requires authentication but token is missing.
        status: 401
        traceId: 00-a52d4f52df80574c92bcdedb9abba5b0-7f70c12f16a7c44d-00
      title: AuthenticationError
    update-avatar-command:
      type: object
      required:
        - avatarImageFile
      properties:
        avatarImageFile:
          type: string
          format: binary
      title: UpdateAvatarCommand
    webhook-event-type-id:
      type: string
      enum:
        - CallRinging
        - EmergencyCall
        - CallAnswered
        - CallPickup
        - CallCompleted
        - C2CCall
        - CallMissed
        - CallBlocked
        - CallBusy
        - CallPark
        - CallUnPark
        - CallHold
        - CallResume
        - CallForward
        - CallBlindTransfer
        - CallConsultativeTransfer
        - CallRecorded
        - CallRecordingFailed
        - CallRgQueueEntered
        - CallRgTierRinging
        - CallRgQueueComplete
        - VoiceMailReceived
        - VoiceMailNotify
        - VoiceMailMissed
        - MessageReceived
        - CallStarted
      x-ms-enum:
        name: WebhookEventType
        modelAsString: false
        values:
          - value: CallRinging
            description: >-
              This event is triggered when a call is ringing. This event will
              trigger for both inbound and outbound calls and is typically
              followed by by a `CallAnswered` or `CallMissed` event.
            name: Call Ringing
          - value: EmergencyCall
            description: >-
              This event is triggered when a call is placed to an emergency
              serivce.
            name: Emergency Call Placed
          - value: CallAnswered
            description: >-
              This event is triggered when a Team Member answers an incoming
              call or when an outgoing call is answered by the dialed
              destination number.
            name: Call Answered
          - value: CallPickup
            description: >-
              This notification is triggered when a Team Member uses the Pick Up
              feature (*21) to answer a call ringing on another Team Members
              extension.
            name: Call Pickup
          - value: CallCompleted
            description: >-
              Event is triggered when a call is successfully completed. This
              event will trigger for both inbound and outbound calls.
            name: Call Completed
          - value: C2CCall
            description: Provides a summary of a call triggered by the click-to-call flow.
            name: Click-To-Call Result
          - value: CallMissed
            description: >-
              This event is triggered when an incoming call isnâ€™t answered by
              any phone in your net2phone account.
            name: Call Missed
          - value: CallBlocked
            description: This event is triggered when an incoming call is blocked.
            name: Call Blocked
          - value: CallBusy
            description: >-
              The event is triggered when an outbound call receives a 4xx or 5xx
              error response to the INVITE indicating the call failed for some
              reason.
            name: Call Busy
          - value: CallPark
            description: This event is triggered when a Team Member parks a call.
            name: Call Park
          - value: CallUnPark
            description: >-
              This event is triggered when a Team Member unparks a call. NOTE
              The team member that unparks a call will also get a `CallAnswered`
              event.
            name: Call Unpark
          - value: CallHold
            description: This event is triggered when a Team Member puts a call on hold.
            name: Call Hold
          - value: CallResume
            description: This event is triggered when a Team Member resumes a call.
            name: Call Resume
          - value: CallForward
            description: This event is triggered when a Team Member forwards a call.
            name: Call Forward
          - value: CallBlindTransfer
            description: >-
              This event is issued when a Team Member transfers a call via blind
              (cold) transfer.
            name: Call Blind Transfer
          - value: CallConsultativeTransfer
            description: >-
              This event is issued when a Team Member transfers a call via
              consultative (warm) transfer.
            name: Call Consultative Transfer
          - value: CallRecorded
            description: >-
              This event is triggered when an inbound or outbound call has been
              successfully recorded.
            name: Call Recorded
          - value: CallRecordingFailed
            description: This event is triggered when a call fails to record.
            name: Call Recording Failed
          - value: CallRgQueueEntered
            description: >-
              The event is issued when a call enters a Ring Group with call
              queue enabled.
            name: Call Ring Group Queue Entered
          - value: CallRgTierRinging
            description: >-
              The event is issued when a call waiting in a Ring Group with call
              queue enabled enters a Tier which results in calls being sent to
              Team Member in that Tier.
            name: Call Ring Group Tier Ringing
          - value: CallRgQueueComplete
            description: >-
              The event is issued when a call in a Ring Group completes by
              either being answered in a Tier or the caller hangs up.
            name: Call Ring Group Queue Complete
          - value: VoiceMailReceived
            description: >-
              A voicemail was left for a net2phone user. This event will trigger
              when an incoming (only) call is not answered by any phone in your
              net2phone account and a voicemail is recorded.
            name: Voicemail Received
          - value: VoiceMailNotify
            description: >-
              This event is triggered when an incoming call is sent to a Team
              Memberâ€™s voicemail but the caller doesnâ€™t leave a voicemail. A
              common scenario for this would be the case where the callers hangs
              up before leaving a voicemail.
            name: Voicemail Notify
          - value: VoiceMailMissed
            description: >-
              This event is triggered when an incoming call is sent to a Team
              Memberâ€™s voicemail but the caller doesnâ€™t leave a voicemail. A
              common scenario for this would be the case where the callers hangs
              up before leaving a voicemail.
            name: Voicemail Missed
          - value: MessageReceived
            description: >-
              This event is triggered when a Team Member or Account receives a
              message.
            name: Message Received
          - value: CallStarted
            description: >-
              This event is triggered for all calls
              (answered/unanswered/rejected etc).
            name: Call Started
      title: WebhookEventTypeId
    webhook-event-type:
      type: object
      required:
        - id
        - displayName
      properties:
        id:
          $ref: '#/components/schemas/webhook-event-type-id'
        displayName:
          type: string
      example:
        id: CallRinging
        displayName: Call Ringing
      title: WebhookEventType
    collection-of-webhook-event-type:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/webhook-event-type'
      title: CollectionOfWebhookEventType
    cursor-page:
      type: object
      required:
        - hasAfter
        - hasBefore
      properties:
        after:
          type: string
          nullable: true
          description: >-
            The opaque cursor pointing to the last record of the page. Set to
            `null` if the resulting collection is empty.
          example: eyJrIjoiRkM5RDhDQTktRkZCMy00REEzLTg1MEQtNkQ3Nzk5QTMzMTlFIn0=
        hasAfter:
          type: boolean
          description: 'If false, this is the last page of data.'
        before:
          type: string
          nullable: true
          description: >-
            The opaque cursor pointing to the first record of the page. Set to
            `null` if the resulting collection is empty.
          example: eyJrIjoiN0E2RjQ2NjYtNzNGOC00QzM4LTlDOUYtNThCRkY2NDE2QzQ4In0=
        hasBefore:
          type: boolean
          description: 'If false, this is the first page of data.'
      title: CursorPage
    webhook-subscription-id:
      type: integer
      format: int32
      example: 1
      title: WebhookSubscriptionId
    webhook-subscription-reference:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/webhook-subscription-id'
      title: WebhookSubscriptionReference
    webhook-subscription-owner-type:
      type: string
      description: >
        Webhook subscriptions owned by `Account` can be edited by all admins in
        this account. Webhook subscriptions owned by `User` can only be scoped
        to this user and can be edited by the same user only.
      enum:
        - User
        - Account
      title: WebhookSubscriptionOwnerType
    webhook-event-type-reference:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/webhook-event-type-id'
      title: WebhookEventTypeReference
    webhook-subscription-event-type-filter-options:
      type: object
      required:
        - eventTypes
      properties:
        eventTypes:
          type: array
          items:
            $ref: '#/components/schemas/webhook-event-type-reference'
      title: WebhookSubscriptionEventTypeFilterOptions
    user-reference:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/user-id'
      title: UserReference
    webhook-subscription-user-filter-options:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/user-reference'
      title: WebhookSubscriptionUserFilterOptions
    create-webhook-subscription-command:
      type: object
      required:
        - displayName
        - endpointUrl
        - ownerType
      properties:
        displayName:
          type: string
          minLength: 1
          maxLength: 60
          example: CRM Integration
        description:
          type: string
          nullable: true
          maxLength: 500
          example: Webhook for CRM integration
        endpointUrl:
          type: string
          description: >-
            The HTTP/HTTS URL of the endpoint to receive the POST callback once
            an event happens.
          format: uri
          example: 'https://yet-another-cool-crm.example.org'
        ownerType:
          $ref: '#/components/schemas/webhook-subscription-owner-type'
        isEnabled:
          type: boolean
          default: false
        eventTypeFilter:
          nullable: true
          allOf:
            - $ref: >-
                #/components/schemas/webhook-subscription-event-type-filter-options
        scopeFilter:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/webhook-subscription-user-filter-options'
      title: CreateWebhookSubscriptionCommand
    created-at-time:
      type: string
      description: The creation timestamp of a resource.
      format: date-time
      title: CreatedAtTime
    updated-at-time:
      type: string
      format: date-time
      description: >-
        The last update timestamp of a resource. It's also set when a resource
        is first created.
      title: UpdatedAtTime
    timestamp-audit-fields:
      type: object
      required:
        - createdAtTime
        - updatedAtTime
      properties:
        createdAtTime:
          $ref: '#/components/schemas/created-at-time'
        updatedAtTime:
          $ref: '#/components/schemas/updated-at-time'
      title: TimestampAuditFields
    user-audit-fields-optional:
      type: object
      properties:
        createdBy:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/user'
        updatedBy:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/user'
      title: UserAuditFieldsOptional
    webhook-subscription-secret:
      type: object
      required:
        - webhookSubscriptionId
        - secretValue
      properties:
        webhookSubscriptionId:
          $ref: '#/components/schemas/webhook-subscription-id'
        secretValue:
          type: string
          format: password
          example: oMekrSUoBkHTh3fv7p3AKytkQqFBgrQW
      title: WebhookSubscriptionSecret
    webhook-subscription-event-type-filter:
      type: object
      required:
        - eventTypes
      properties:
        eventTypes:
          type: array
          items:
            $ref: '#/components/schemas/webhook-event-type'
      title: WebhookSubscriptionEventTypeFilter
    webhook-subscription-user-filter:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/user'
      title: WebhookSubscriptionUserFilter
    webhook-subscription:
      allOf:
        - $ref: '#/components/schemas/webhook-subscription-reference'
        - $ref: '#/components/schemas/create-webhook-subscription-command'
        - $ref: '#/components/schemas/timestamp-audit-fields'
        - $ref: '#/components/schemas/user-audit-fields-optional'
        - type: object
          required:
            - secret
          properties:
            secret:
              $ref: '#/components/schemas/webhook-subscription-secret'
            eventTypeFilter:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/webhook-subscription-event-type-filter'
            scopeFilter:
              nullable: true
              oneOf:
                - $ref: '#/components/schemas/webhook-subscription-user-filter'
      title: WebhookSubscription
    cursor-page-of-webhook-subscription:
      allOf:
        - $ref: '#/components/schemas/cursor-page'
        - type: object
          required:
            - items
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/webhook-subscription'
      title: CursorPageOfWebhookSubscription
    update-webhook-subscription-command:
      allOf:
        - $ref: '#/components/schemas/create-webhook-subscription-command'
      title: UpdateWebhookSubscriptionCommand
  headers:
    n2p-response-type:
      description: >
        The type of the response schema in the body. It can be useful to
        distinguish between different response types before parsing the body.
      schema:
        type: string
  responses:
    authentication-error:
      description: 'The authentication token is missing, expired or invalid.'
      headers:
        N2P-Response-Type:
          $ref: '#/components/headers/n2p-response-type'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/authentication-error'
    validation-error:
      description: The provided input is invalid.
      headers:
        N2P-Response-Type:
          $ref: '#/components/headers/n2p-response-type'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/validation-error'
    not-found-error:
      description: The requested resource is not found.
      headers:
        N2P-Response-Type:
          $ref: '#/components/headers/n2p-response-type'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/not-found-error'
    forbidden-error:
      description: The operation is blocked due to insufficient access rights.
      headers:
        N2P-Response-Type:
          $ref: '#/components/headers/n2p-response-type'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/forbidden-error'
  parameters:
    user-id:
      name: userId
      in: path
      required: true
      description: The numeric id of the user.
      schema:
        $ref: '#/components/schemas/user-id'
    limit:
      name: limit
      in: query
      description: Number of items per page.
      schema:
        type: integer
        format: int32
        default: 10
        minimum: 1
        maximum: 100
    before:
      name: before
      in: query
      description: >
        The opaque cursor to paginate backwards. Cannot be used together with
        `after`.
      schema:
        type: string
        example: eyJrIjoiRkM5RDhDQTktRkZCMy00REEzLTg1MEQtNkQ3Nzk5QTMzMTlFIn0=
    after:
      name: after
      in: query
      description: >
        The opaque cursor to paginate forwards. Cannot be used together with
        `before`.
      schema:
        type: string
        example: eyJrIjoiRkM5RDhDQTktRkZCMy00REEzLTg1MEQtNkQ3Nzk5QTMzMTlFIn0=
    webhook-subscription-id:
      name: webhookSubscriptionId
      in: path
      required: true
      description: The numeric id of the webhook subscription.
      schema:
        $ref: '#/components/schemas/webhook-subscription-id'